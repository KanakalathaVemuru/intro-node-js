0f3b4e767f50ebdedc7dcb87668c7058
const users = new Array(20).fill(0).map((_, i) => {
  return {
    id: i,
    createdAt: Date.now() + i,
    email: `readycoder${i}@gmail.com`
  };
});

// simulate async db call with promise
const findUser = id => new Promise((resolve, reject) => {
  const user = users.find(user => {
    return user.id === id;
  });

  if (user) {
    return resolve(user);
  }
  reject(new Error(`No user with id ${id}`));
});

// simulate async db call with promise
const deleteUser = id => new Promise((resolve, reject) => {
  const i = users.findIndex(user => user.id === id);

  if (i < 0) {
    reject(new Error(`No user with id ${id}`));
  }

  users.splice(i, 1);
  resolve({ id });
});

module.exports = {
  findUser,
  deleteUser
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJzLmpzIl0sIm5hbWVzIjpbInVzZXJzIiwiQXJyYXkiLCJmaWxsIiwibWFwIiwiXyIsImkiLCJpZCIsImNyZWF0ZWRBdCIsIkRhdGUiLCJub3ciLCJlbWFpbCIsImZpbmRVc2VyIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ1c2VyIiwiZmluZCIsIkVycm9yIiwiZGVsZXRlVXNlciIsImZpbmRJbmRleCIsInNwbGljZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFFBQVEsSUFBSUMsS0FBSixDQUFVLEVBQVYsRUFBY0MsSUFBZCxDQUFtQixDQUFuQixFQUNiQyxHQURhLENBQ1QsQ0FBQ0MsQ0FBRCxFQUFJQyxDQUFKLEtBQVU7QUFDYixTQUFPO0FBQ0xDLFFBQUlELENBREM7QUFFTEUsZUFBV0MsS0FBS0MsR0FBTCxLQUFhSixDQUZuQjtBQUdMSyxXQUFRLGFBQVlMLENBQUU7QUFIakIsR0FBUDtBQUtELENBUGEsQ0FBZDs7QUFTQTtBQUNBLE1BQU1NLFdBQVlMLEVBQUQsSUFBUSxJQUFJTSxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3hELFFBQU1DLE9BQU9mLE1BQU1nQixJQUFOLENBQVdELFFBQVE7QUFDOUIsV0FBT0EsS0FBS1QsRUFBTCxLQUFZQSxFQUFuQjtBQUNELEdBRlksQ0FBYjs7QUFJQSxNQUFJUyxJQUFKLEVBQVU7QUFDUixXQUFPRixRQUFRRSxJQUFSLENBQVA7QUFDRDtBQUNERCxTQUFPLElBQUlHLEtBQUosQ0FBVyxtQkFBa0JYLEVBQUcsRUFBaEMsQ0FBUDtBQUNELENBVHdCLENBQXpCOztBQVdBO0FBQ0EsTUFBTVksYUFBY1osRUFBRCxJQUFRLElBQUlNLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDMUQsUUFBTVQsSUFBSUwsTUFBTW1CLFNBQU4sQ0FBZ0JKLFFBQVFBLEtBQUtULEVBQUwsS0FBWUEsRUFBcEMsQ0FBVjs7QUFFQSxNQUFJRCxJQUFJLENBQVIsRUFBVztBQUNUUyxXQUFPLElBQUlHLEtBQUosQ0FBVyxtQkFBa0JYLEVBQUcsRUFBaEMsQ0FBUDtBQUNEOztBQUVETixRQUFNb0IsTUFBTixDQUFhZixDQUFiLEVBQWdCLENBQWhCO0FBQ0FRLFVBQVEsRUFBQ1AsRUFBRCxFQUFSO0FBQ0QsQ0FUMEIsQ0FBM0I7O0FBV0FlLE9BQU9DLE9BQVAsR0FBaUI7QUFDZlgsVUFEZTtBQUVmTztBQUZlLENBQWpCIiwiZmlsZSI6InVzZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdXNlcnMgPSBuZXcgQXJyYXkoMjApLmZpbGwoMClcclxuLm1hcCgoXywgaSkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBpZDogaSxcclxuICAgIGNyZWF0ZWRBdDogRGF0ZS5ub3coKSArIGksXHJcbiAgICBlbWFpbDogYHJlYWR5Y29kZXIke2l9QGdtYWlsLmNvbWBcclxuICB9XHJcbn0pXHJcblxyXG4vLyBzaW11bGF0ZSBhc3luYyBkYiBjYWxsIHdpdGggcHJvbWlzZVxyXG5jb25zdCBmaW5kVXNlciA9IChpZCkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gIGNvbnN0IHVzZXIgPSB1c2Vycy5maW5kKHVzZXIgPT4ge1xyXG4gICAgcmV0dXJuIHVzZXIuaWQgPT09IGlkXHJcbiAgfSlcclxuIFxyXG4gIGlmICh1c2VyKSB7XHJcbiAgICByZXR1cm4gcmVzb2x2ZSh1c2VyKVxyXG4gIH1cclxuICByZWplY3QobmV3IEVycm9yKGBObyB1c2VyIHdpdGggaWQgJHtpZH1gKSlcclxufSlcclxuXHJcbi8vIHNpbXVsYXRlIGFzeW5jIGRiIGNhbGwgd2l0aCBwcm9taXNlXHJcbmNvbnN0IGRlbGV0ZVVzZXIgPSAoaWQpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICBjb25zdCBpID0gdXNlcnMuZmluZEluZGV4KHVzZXIgPT4gdXNlci5pZCA9PT0gaWQpXHJcblxyXG4gIGlmIChpIDwgMCkge1xyXG4gICAgcmVqZWN0KG5ldyBFcnJvcihgTm8gdXNlciB3aXRoIGlkICR7aWR9YCkpXHJcbiAgfVxyXG5cclxuICB1c2Vycy5zcGxpY2UoaSwgMSlcclxuICByZXNvbHZlKHtpZH0pXHJcbn0pXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICBmaW5kVXNlcixcclxuICBkZWxldGVVc2VyXHJcbn1cclxuIl19